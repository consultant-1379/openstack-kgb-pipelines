pipelineJob('FFE_Commissioning_Pipeline') {
  description ('description FFE Commissioning Job - autogenerated using JobDSL - all manual changes will be overwritten!')
    logRotator {
        numToKeep(100)
    }
    parameters {
        stringParam{
            name('project_name')
            defaultValue('')
            description('Name of Openstack project')
            trim(true)
        }
        stringParam{
            name('cloud')
            defaultValue('')
            description('Openstack cloud')
            trim(true)
        }
        stringParam{
            name('volumes')
            defaultValue('120')
            description('Number of volumes for project')
            trim(true)
        }
        stringParam{
            name('cpu')
            defaultValue('232')
            description('CPU for OpenStack project')
            trim(true)
        }
        stringParam{
            name('ram')
            defaultValue('545792')
            description('RAM in MB for OpenStack project')
            trim(true)
        }
        stringParam{
            name('storage')
            defaultValue('2664')
            description('Storage in GB for Openstack project')
            trim(true)
        }
        stringParam{
            name('contacts')
            defaultValue('')
            description('Point of contact for Openstack project (comma separated email addresses)')
            trim(true)
        }
        activeChoiceParam('program') {
            description('Used for DTT deployment')
            choiceType('SINGLE_SELECT')
            groovyScript {
                script('''import groovy.json.JsonSlurper

def list = []
def jsonSlurper = new JsonSlurper()
def get_programs_cmd = "curl -X GET -ks https://atvdtt.athtem.eei.ericsson.se/api/programs".execute()
get_programs_cmd.waitFor()
def get_programs_result = get_programs_cmd.in.text
def program_data = jsonSlurper.parseText(get_programs_result)

for (int i = 0; i < program_data.size(); i++){
    list << program_data[i]["name"]
}

return list''')
            }
        }
        activeChoiceParam('requirement_area') {
            description('Used for DTT deployment')
            choiceType('SINGLE_SELECT')
            groovyScript {
                script('''import groovy.json.JsonSlurper

def list = []
def jsonSlurper = new JsonSlurper()
def curl_cmd = "curl -X GET -ks https://atvdtt.athtem.eei.ericsson.se/api/areas".execute()
curl_cmd.waitFor()
def result = curl_cmd.in.text
def slurped_data = jsonSlurper.parseText(result)

for (int i = 0; i < slurped_data.size(); i++){
    list << slurped_data[i]["name"]
}
return list''')
            }
        }
        activeChoiceParam('team_name') {
            filterable()
            description('Used for DTT deployment')
            choiceType('SINGLE_SELECT')
            groovyScript {
                script('''// A groovy script that can be used for extensible choice parameters to fetch a list of teams from the team inventory tool
// to be used for selecting team name for DTT entry when using the FFE commissioning pipeline

import groovy.json.JsonSlurper

def list = ["No Team"]
def jsonSlurper = new JsonSlurper()
println(jsonSlurper)
def get_teams_cmd = "curl -X GET -ks https://pdu-oss-tools1.seli.wh.rnd.internal.ericsson.com/team-inventory/api/teams".execute()
// get_teams_cmd.waitFor()
def get_teams_result = get_teams_cmd.in.text
// println(get_teams_result)
def teams_data = jsonSlurper.parseText(get_teams_result)
println(teams_data)
println("Teams: "+teams_data.size())
// println("Number of teams fetched: "+teams_data.size())
// teams_data.each{

// }
for (int i = 0; i < teams_data.size(); i++){
    list << teams_data[i]["name"]
}
println(list)
return list''')
            }
        }
        stringParam('jira_ticket', '', 'Demand management ticket associated with deployment (eg. EEDS-XXXX) ticket wil be updated with project info and also linked to DTT page')
        stringParam('spocs', '', 'Signums of spocs to be listed on DTT deployment (separated by comma)')
        stringParam('FFE_Commissioning_Agents', "$FFE_Commissioning_Agents", '')
    }
    definition {
        cpsScm {
          scm {
            git {
              branch('master')
              remote {
                credentials('lciadm100_gerrit_ssh')
                url("${GERRIT_MIRROR}/OSS/ENM-Parent/SQ-Gate/com.ericsson.de/openstack-kgb-pipelines")
              }
              extensions {
                cleanBeforeCheckout()
              }
        	}
          }
          scriptPath('FFE/Jenkinsfiles/FFE_Commissioning_Pipeline.groovy')
          lightweight(lightweight = true)
        }
    }
}
