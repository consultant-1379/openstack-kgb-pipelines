import java.io.File
import groovy.json.JsonSlurper

create_update_ffe_projects_file(WORKSPACE)

String FFEDeployments = readFileFromWorkspace('ffe_projects.txt')

FFEDeployments.eachLine{
    deploymentName -> createFFEWrapperJob(deploymentName)
}

String deploymentName
String deploymentId

def create_update_ffe_projects_file(dir){
  def curl_cmd = "curl --header \'Accept: application/json\' -X GET -ks https://meteo.athtem.eei.ericsson.se/get-ffe-projects-api/".execute()
  curl_cmd.waitFor()
  def project_list_returned = curl_cmd.in.text

  def slurper_data = new JsonSlurper().parseText(project_list_returned).FFE_Projects
  def project_list = ""

  for (int i = 0; i < slurper_data.size(); i++){
      project_list = project_list + slurper_data.get(i) + "\n"
  }

  FileWriter myWriter = new FileWriter(dir+'/ffe_projects.txt')
  myWriter.write(project_list)
  myWriter.close()
}

def createFFEWrapperJob(deployment_name){
    deploymentName = deployment_name
    jenkinsFile = 'FFE/Jenkinsfiles/FFE_Wrapper_Job_Pipeline.groovy'
    deploymentId = "ieatenm"+deploymentName.split('_').last().toLowerCase()
    pipelineJob(deploymentName){
        description ('FFE Install/Upgrade/TAF Pipeline for ' + deploymentName + ' - autogenerated using JobDSL - all manual changes will be overwritten!')
        authorization {
            permissions('authenticated', [
                'hudson.model.Item.Build',
                'hudson.model.Item.Cancel',
                'hudson.model.Item.Workspace'
            ])
        }
        parameters {
            choiceParam(
                'jobType',
                ['install', 'upgrade', 'taf_only', 'apply_licenses_and_certs_only', 'teardown'],
                '''<p>Select <b>install</b> for rollout of product set. This selection will first tear down your project ie delete all existing stacks, instances and volumes and then run the install, then the Install Licenses job, and Apply Certs job will be run.</p>
    <p>Select <b>upgrade</b> for upgrade of an installed project to a newer product set.</p>
    <p>Select <b>taf_only</b> to run only TAF test suites on a FFE deployment.</p>
    <p>Select <b>apply_licenses_and_certs_only</b> to install the ENM licenses and apply certificates. <b>This job type should only be used to run Add License and Apply Certs stage on an installed deployment.</b></p>
    <p>Select <b>teardown</b> for teardown only. This will delete all existing stacks, instances and volumes.</p>'''
            )
            stringParam{
                name('product_set_version')
                defaultValue('')
                description('''<p>Enter the product set that you want to install for your tenancy</p>
<p>The format should be <b>24.05.43</b></p>
<p>Latest green product set can be retrived from the <a href="https://mtportal.seli.wh.rnd.internal.ericsson.com/metrics/#maintrack-radiator">Radiator</a><br>
<p>If left blank, the latest green product set will be used.
<br><b><u>Optional for Install and Upgrade</u></b>''')
                trim(true)
            }
            textParam(
                'deployPackage',
                '',
                '''  <p>If you <b>want</b> to execute software update, <b>add your packages here</b> in the following format:</p>
    <blockquote><p><font color="blue"><b>&lt;deliverable name&gt;::&lt;version&gt;</b></font>, where version is in maven version format or "Latest". There is also an option to add a package that that has not been officially delivered as a complete URL.
    <br><p><font color="blue">Please note: "::Latest" is not supported, you have to specify an actual version of a rpm or a download link"</p>
    <br>ERICrpm::1.2.3
    <br>ERICrpm::https://cifwk-oss.lmera.ericsson.se/static/tmpUploadSnapshot/2015-08-17_14-44-56/ERICapdatamacro_CXP9030537-1.22.9-SNAPSHOT20150817134050.noarch.rpm
    </p></blockquote>

    <blockquote><p><b>When adding multiple rpms, use @@ as the separator:</b>
    <br>
    &lt;deliverable name&gt;::&lt;version&gt;<font color="blue"><b>@@</b></font>&lt;deliverable name&gt;::&lt;version&gt;
    <br>ERICrpm::1.0.25@@ERICrpm::1.34.122
    </p></blockquote>
    <br><b>Optional for Install and Upgrade</b>'''
            )
            stringParam(
                'deploymentId',
                deploymentId,
                'The deployment to run the job against eg. ieatenmcXXXX'
                )

            choiceParameter {
                name('enterDeployerVersion')
                description('')
                filterable(false)
                choiceType('PT_SINGLE_SELECT')
                script {
                    groovyScript {
                        script {
                            script("return ['No','Yes']")
                            sandbox(true)
                        }
                        fallbackScript {
                            script("")
                            sandbox(true)
                        }
                    }
                }
                randomName('')
                filterLength(0)
            }
            activeChoiceReactiveReferenceParam('deployerVersion') {
                description('')
                choiceType('FORMATTED_HTML')
                groovyScript {
                    script("""if (enterDeployerVersion.equals("Yes")) {
return '''<input name="value" value="" type="text" placeholder="Deployer Version">
<h1 style="color: #ff5000;">Only enter the Deployer Version when there is a known issue with the deployer and the latest KGB product set</h1>
<p>The Deployer Version for the KGB product set will be automatically added to the rollout command if this build parameter is kept blank.</p>
<p><b>Unless specified, please leave this parameter blank.</b></p>'''
} else {
return ""
}""")
                }
                referencedParameter('enterDeployerVersion')
            }
            choiceParameter {
                name('enterProfiles')
                description('')
                filterable(false)
                choiceType('PT_SINGLE_SELECT')
                script {
                    groovyScript {
                        script {
                            script("return ['No','Yes']")
                            sandbox(true)
                        }
                        fallbackScript {
                            script("")
                            sandbox(true)
                        }
                    }
                }
                randomName('')
                filterLength(0)
            }
            activeChoiceReactiveReferenceParam('profiles') {
                description('')
                choiceType('FORMATTED_HTML')
                groovyScript {
                    script("""if (enterProfiles.equals("Yes")) {
return '''<input name="value" value="" type="text" placeholder="profiles">
<h1 style="color: #ff5000;">Only enter the profiles if you want to use a custom list of profiles. Enter the text in a comma separated list.</h1>
<p>Current list of profiles is core_openstack_software_preparation,vnflcm_upgrade,venm_pre_upgrade_phase2,venm_enm_software_upgrade</p>
<p><b>Unless specified, please leave this parameter blank.</b></p>'''
} else {
return ""
}""")
                }
                referencedParameter('enterProfiles')
            }
            choiceParameter {
                name('enterEDPVersion')
                description('')
                filterable(false)
                choiceType('PT_SINGLE_SELECT')
                script {
                    groovyScript {
                        script {
                            script("return ['No','Yes']")
                            sandbox(true)
                        }
                        fallbackScript {
                            script("")
                            sandbox(true)
                        }
                    }
                }
                randomName('')
                filterLength(0)
            }
            activeChoiceReactiveReferenceParam('edpVersion') {
                description('')
                choiceType('FORMATTED_HTML')
                groovyScript {
                    script('''if (enterEDPVersion.equals("Yes")) {
return """<input name="value" type="text" placeholder="EDP Version">
<h1 style="color: #ff5000;">Only enter the EDP Version when there is a known issue with the EDP version and the latest KGB product set</h1>
<p>The EDP Version for the KGB product set will be automatically added to the rollout command if this build parameter is kept blank.</p>
<p><b>Unless specified, please leave this parameter blank.</b></p>"""
} else {
return ""
}''')
                }
                referencedParameter('enterEDPVersion')
            }
            booleanParam(
                'skip_reinstall_netsim_vm',
                false,
                '''If choosing install, it is advised that you reinstall the netsim vm so you have the latest certs installed on the netsim vm.<br>Check this box if you would prefer to skip the netsim reinstall, i.e netsim vm will not be reinstalled<br><b><u>Optional for Install</u></b>'''
            )
            stringParam(
                'mt_utils_version',
                'RELEASE',
                '''This is the version of the scripts available in Nexus<br>We recommend you always use RELEASE<br>However, if there is an issue with RELEASE please use one of the versions available <a href="https://arm1s11-eiffel004.eiffel.gic.ericsson.se:8443/nexus/content/repositories/releases/com/ericsson/mtg/utils/">here</a><br><b style='color:red;'><u>Required for Install, Upgrade, TAF Only</u></b>''')
            stringParam(
                'simdep_release',
                '1.5.773',
                '''TLS SimDep version<br>Example: 1.5.773<br>Required for <b>Update Trust Profiles</b> as part of Install or Deployment Setup<br>Can be retrieved from <a href="https://confluence-oss.seli.wh.rnd.internal.ericsson.com/display/PDUCD/NSS+Delivery+Mail+Communications">NSS Delivery Communications confluence page</a><br>Please use TLS simdep version as <b>1.5.744</b>. If NETSim version is <b><u>less than NSS 23.06.</u></b><br>Please use TLS Simdep version as <b>1.5.773</b>. If NETSim version is <b><u>equal or greater than NSS 23.06</u></b>.<br><b style='color:red;'><u>Required for Install</u></b>''')
            booleanParam(
                'run_taf', false,
                'Check box to run TAF<br><b>Required for Install with TAF and Upgrade with TAF</b><br>Automatically set to <b>true</b> for TAF Only builds')
            textParam(
                'taf_schedule',
                '',
                '''<b>Full XML must be entered at build time</b><br>
TAF Schedule Example:<br>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;schedule xmlns=&quot;http://taf.lmera.ericsson.se/schema/te&quot;
          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
          xsi:schemaLocation=&quot;http://taf.lmera.ericsson.se/schema/te http://taf.lmera.ericsson.se/schema/te/schedule/xml&quot;&gt;

&lt;item&gt;
    &lt;name&gt;Install Licenses&lt;/name&gt;
    &lt;component&gt;com.ericsson.oss.services.lcm:ERICTAFlicensecontrolmonitoringservice_CXP9031454&lt;/component&gt;
    &lt;suites&gt;LicenseRollout.xml&lt;/suites&gt;
&lt;/item&gt;
&lt;item-group parallel=&quot;false&quot;&gt;
&lt;item timeout-in-seconds=&quot;3600&quot;&gt;
    &lt;name&gt;Maintrack Entry Loop - Node agnostic Data Driven test&lt;/name&gt;
    &lt;component&gt;com.ericsson.oss.services.mtg:ERICTAFmaintracknodeagnostictest_CXP9032907&lt;/component&gt;
    &lt;suites&gt;nodeAgnosticTest.xml&lt;/suites&gt;
&lt;/item&gt;

&lt;item timeout-in-seconds=&quot;1800&quot;&gt;
    &lt;name&gt;FM_Acceptance_Test - GameOfRules&lt;/name&gt;
    &lt;component&gt;com.ericsson.oss.testware.fm:ERICTAFfmacceptancetestware_CXP9032937&lt;/component&gt;
    &lt;suites&gt;FM_CLI_GameOfRules.xml&lt;/suites&gt;
    &lt;groups&gt;SmokeTest&lt;/groups&gt;
&lt;/item&gt;


&lt;/item-group&gt;

&lt;/schedule&gt;
</pre>
<br><b style='color:red;'><u>Required for Install with TAF, Upgrade with TAF, TAF Only</u></b>''')
            stringParam(
                'taf_profiles',
                '',
                '''<p>This parameter allows the selection of the profile to be used during the run</p>
<p>The profile is a property that, in the testware, selects a series of predefined settings for the execution of the testware itself.</p>
<p>Examples include smokeTest,license_rollout</p><br><b>Optional for Install with TAF, Upgrade with TAF and TAF Only</b>''')
            stringParam(
                'mt_csv_file_uri',
                '',
                'Enter the value for the MT_CSV_FILE_URI. If using a custom csv file, it can be placed in the <a href="https://ci-portal.seli.wh.rnd.internal.ericsson.com/dmt/uploadSnapshot/">CI Staging Area</a> and link added above<br><b>Optional for Install with TAF, Upgrade with TAF and TAF Only</b>'
                )
            stringParam(
                'internal_nodes',
                'amos_1,cmserv_1,fmalarmprocessing_1,fmalarmprocessing_2,fmalarmprocessing_3,fmalarmprocessing_4,fmalarmprocessing,fmx_1,fmx_2,itservices_1,itservices-1-internal,jms_1,opendj_1,opendj_2,openidm_0,openidm_1,scripting_1,sps_1,secserv_1,fm_1,fm_2',
                '''Enter the value for the parameter <b>taf.config.dit.deployment.internal.nodes</b><br><b>Optional for Install with TAF, Upgrade with TAF and TAF Only</b>'''
                )
            stringParam(
                'email_recipients',
                '',
                'Email addresses of others users to receive emails on the build status (comma separated). Note: user who started the build will receive the email by default')
            labelParam('jenkins_agent') {
                defaultValue("${deploymentName}_gateway")
                description('')
            }
        }
        logRotator {
            numToKeep(40)
        }
        authenticationToken('fem24_token')
        definition {
            cps {
                script(readFileFromWorkspace(jenkinsFile))
                sandbox(true)
            }
        }
    }
}
